----　vscodeの画面　-----

■ではこれからツール実演します～

・Github actions はmaterialディレクトリは配下のファイルが変更されpushされたことを検知して動作します。
今回はoperation.yamlの内容を変更します。

→ここの実施の仕方変更する？
ということでしたら、operationはすでにあるものではなくて、新規で"20230727_bypass"みたいなのを作って、directoryもcopyでいいので新規で切った方が、使い方のイメージがしやすいように思いました。
実際にどうするかはお任せします。


・operationは経路を迂回させるときにbypass,戻す際にbypass_backで定義しているので、
今回はbypassにして経路迂回させます。


・では実際にgithub にpushしていきます。


----Github Actionsの画面に移動-----


・pushするとgithub上で事前に定義したworkflowが動き出します。

・check myipでgithub actionsに振られるipを確認して、juniper vlabsに手動で穴あけしに行きます。
github actions	に振られるIPは固定ではないため、手動で穴あけしています…
このあたりの詳細は後程、内田さんの方からお話いたします。

・playbookの実行結果を確認して行きましょう。
まず、事前のshow routeの結果でVMX01からVMX02へのloopback, VMX02からVMX01へのloopbackそれぞれへの経路で、
metricが1のge0/0/0を経由していることがわかります。
その後ospfの設定で双方のge-0/0/0.0 の metric を 150に変更したので、
metricが3のge0/0/2が最適経路として選択されたことがわかります。


以上が、事前に指定したディレクトリが変更され、githubにpushされたことがトリガーとなり
juniper vlabsの機器に設定変更をかけに行くgithub acttionsのデモになります。

では、実際にどのように動作させているかを、再び内田さんの方から説明いただきます。
内田さんよろしくお願いいたします。