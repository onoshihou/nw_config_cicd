■アジェンダ
それではConfigCICDグループの発表を始めさせていただきます。
アジェンダはこんな感じになってます。

■メンバー紹介

まずconfig CICDグループの参加メンバ紹介からさせていただきます。
今回の発表では一番人数が多いグループになっています。

最初に小野さんです。
２日後に誕生日を迎えるそうです。(おめでとうございます)

続いて内田さんです。
内田さんはconfig_CICDのみならず、
この後Google apps scriptの発表もしていただけます。

次に佐藤さんです。
今期から参加してくださいました。
本日、司会も担当してくださってありがとうございます。

あとは、今話している北村の4名となります。

それでは、さっそく今回の発表のGithub Actionsを用いた
ネットワーク自動化の内容に移ります。



■上期の振り返り

まず、上期に実施した内容について振り返りさせていただきます。
上期でお見せしたdemoの環境は、この図のようにGitHub関連のツールと
Juniper vLabsというNWのラボ環境がある状態でした。
demoの内容としては、
０１．まず最初に上長がメンバに対してコンフィグの作成依頼を行います。
０２．続いて、メンバが作成したコンフィグをGitHubにアップロードします。
０３．そうするとGitHub Actionsがディレクトリの状態変化を検知します。
０４．検知したことをトリガーに、Ansibleを動かすために
　　　コンテナレジストリという保管庫からdockerの実行環境を持ってきます。
０５．そしてGitHub ActionsがJuniper vLabsに対して設定変更を行います。
０６．最後にJuniper vLabsの事後の状態が
　　　事前に定義した状態となっていることを確認します。

ここまでの一連の流れが上期までに実施した内容です。


■下期でやりたかった事

そして今回実施した内容としては、
・1点目は検証環境と本番環境の2面化です。
・2点目は自動でpullrequestの作成です。
・3点目は設定変更後に最新の設定状態を取得できるようなconfigの世代管理の実装
・最後に検証、本番環境をjuniper vlabsからcontainerlabのarista機に移行した
という所を今回実装致しました。

具体的にですが先ほどまでの検証環境への設定変更に続き、
０７．検証環境での実行結果が想定通りであったら
　　　PullRequestで上長に承認依頼を自動的に発行します。
０８．上長が結果について確認して、OK or NGの判断を行います。
０９．OKであれば上長が検証ブランチから本番ブランチへのマージを行います。
１０．検証環境で行ったのと同様にGitHub Actionsがディレクトリの変化を検知して
１１．コンテナレジストリから実行環境の取得をします。
１２．その後、本番環境への設定変更の実施し、
１３．変更した結果のチェックまでを実装いたしました。



■今回のDemoで設定する内容

今回もここまでの内容を分かりやすいようDemoでお見せいたします。
デモとしてお見せしやすいように、図のようにの2台構成にしています。

demo内容としては、Github Actionsを動作させて、
それぞれに新規でstatic routeを追加し、
デフォルトルートからロンゲストマッチで学習した経路への切り替えと
経由するインターフェイスとネクストホップが変わったことを
確認できるような設定変更を行いたいと思います。




■デモパート
それではツールの実演について内田さんお願い致します！


まず、前述にあったgithub Actionsに関してどのように実現させたのか紹介いたします。


～～～vscode work flowの画面～～～

on～pathsまでの記載で、project/material配下のarista/config内のファイルに変更がかかり、
githubにpushされた際にgithub Actionsが動作することを定義しています。

jobs 以降で実際の処理を記載していきます。

permissionでgithubに対する書き込み権限の設定を行なっています。

container
ansible 実行環境となるdockerイメージを呼び出しコンテナを起動します。

env
dev_or_prodにはブランチ名がdevelopの場合はdevelop、mainの場合はproductionという名前を返す変数を記述しています。
commit_msgにはcommit msgに書いた内容を返す変数を記述しています。

その後のsteps以降で、起動したコンテナ内での動作を記述しています。


checkout codeでは、
apc-nw-auto-cft/auto_check_config_projectリポジトリを
github actionsで呼び出した実行環境にcloneするために記載しています。

inspect config
設定変更前後で「show ip route」を取得し想定の状態になっているかを判定する処理と、
別ファイルで定義して設定内容を流し込む処理を実行しています。

git presetting
コンテナ環境から後続のGit操作を行う際の事前設定を行っています。
以降の記述でもそうですがブランチがdevelopの時だけ必要な処理のため
ifで実行すべきかの判断をする記載しています。

config backup
事前、事後の設定差分の確認と設定後の全体configの取得

git add、git commit、git pushの記述で
git add~git pushまで行います。
commit msgはenvで設定した変数を持ってくるようにしている。


create pull request
前までのconfig_CICDのjobが実行し終えていたら
pull requestを出す処理を実行します。
developからmainへのpull requestでメッセージに実行したGithub ActionsのURLのリンクを記載しています。




では実際にarista/config内のファイル内容を変更してGithubActionsを動作させてみます。
今回はstatic routeの設定を記載してgithub にpushしていきます。
・1号機、2号機に投入する内容の追記
・assume(想定内容)のコマンド返り値の定義

----Github Actionsの画面に移動-----
まずdevelopブランチで動作が行われます。
(各stepの内容を説明しつつconfigCICD⇒create pull requestを説明)
(ワークフローが終わったらconfigCICDに戻ってきて)
change inspectの中を見ると事前で(このように)なっていたものが
事後で(このように)なっていることを確認できます。

また、新規でpull requestが発行されていることも確認できます。
発行されたpull requestからGithub Actionsの実行結果に飛ぶことができるので、そこから変更内容を確認します。
問題なければ、mergeを押すと本番ブランチのmainに変更がかかり再度Github Actionsが動き出します。
検証環境と同様に想定通りの内容で設定変更されていることが確認できます。
mainだとpullrequestが作成される処理が動いていないことが確認できます。

---デモここまで---

～～～ここで play bookの内容を簡単に紹介～～～


内田さんありがとうございました。
では、デモで実行した処理をAnsibleでどのように実装しているか、
簡単ではありますが、playbookの内容も説明もさせていただきます。

～～～ play book ～～～


---arista_change_and_inspect.yaml---
まず最初に、arista_change_and_inspect.yamlは
それぞれの処理が記載されたroleを呼び出すようになっています。
最初のタスクで、assume.ymlというinclude varsを読み込んでいます。

    ---assumeの内容----
    assumeの内容としては、
    設定追加する宛先のshow ip routeを取得できるコマンドを記載と、
    elementではshow ip routeの1要素目にある 
    宛先、経由するinterface、nexthopを抜き出す変数を定義しています。
    result以下では、事前と事後に想定されるroute情報をあらかじめ記載しています。

---arista_change_and_inspect.yamlに戻る---
次のタスクではbeforeという変数を渡して
arista inspectのroleの処理を実行しています。
実際にarista inspectの中に記載されている処理を見ていきたいと思います。

    ---inport inspect----
    ---arista inspectの内容---
        --debug show command--
        debug show commandでは、assumeで定義した
        show ip routeのコマンドを表示させています。

        --get show--
        続いて、get showでは、先ほど表示させた
        コマンドを実際に実行させています。
    
        --debug show--
        そちらの実行させた結果をdebug showで出力させています。

        --debug working result--
        その後の、debug working resultでは、
        まず、assumeで定義していた想定値の出力させています。
        今回、inspect_before_or_afterにはbeforeの変数を渡しているので
        asumeで定義した事前の想定値を取得できます。
        
        次に、actualほうでは、先ほどelementで定義している、
        宛先、経由するinterface、nexthopの情報を
        前のタスクのGet_showで実行した実際の機器に入っている設定内容から
        抜き出して出力させています。


        --Assert--
        最後に、前のタスクで出力させた、想定値と実際の値を比較して
        イコールであれば次のタスクに進みます。

---arista_change_and_inspect.yamlに戻る---
次のタスクではarista_changeのroleの処理を実行しています。

    ---arista_change roleの呼び出し---
    こちらに関しては、デモでも説明がありましたが、
    materialというディレクトリ配下のファイルに記載されたconfigを読み取り
    設定変更をおこなうタスクとなっております。
    
---arista_change_and_inspect.yamlに戻る---
最後のタスクでは、今度はafterの変数を渡して
arista inspectのroleの処理を実行しています
    ---inport inspect----
    前と同じ流れで、設定変更後の状態がafterで定義した想定の値と
    等しくなっているかを確認いたします。

このようにして、設定変更を行ったり、
想定値と実際の値が異なる場合に処理を止められるような
実装をしています。
今回、Demoでお見せしたように、これらのplaybookをGithub Actionsで動かしていました。

以上がplaybookの説明となります。


■工夫した点
続いて、工夫した点としましては

1点目は環境2面化です。
環境を２面化させるに当たって、ブランチに応じてインベントリファイルを分岐させて、
一つのタスクで複数環境動かせるようにしました。
また、一つの環境のみでしか実施しない処理に関してはif文を用いて、
スキップするように工夫いたしました。

2点目はpull request周りです。
Github Actionsが実行されるトリガーとなるコミットメッセージを取得し、
PullRequestのタイトル部に引用することでpushする理由を分かりやすくしました。
また、PullRequestが生成されるきっかけとなったGithub ActionsのURLを取得し、
PullRequestの本文に記載することで依存関係も分かりやすくしております。


3点目はコンフィグ世代管理です。
当初は投入するコンフィグのみの管理を考えていましたが、
Github Actionsに別途バックアップ処理を追加することで、
現行コンフィグについても管理できるようにしました。


4点目はcontainerlabの移行です。
前期の課題として、GitHub Actionsの実行ごとに、
junipervlabsで都度ipの穴あけをしに行く必要がありました。
juniper vlabsでは/29の範囲までしか一度に穴あけできなかったので、
GitHubActionsが利用するグローバルIPが3200セグメント程度存在するため、
事前に全てを穴開けするのは難しい状態でした。
containerlabに移行する事で、事前にEC2のセキュリティルールに
IPの穴あけする事で、
都度穴あけする必要がなくなりました。


■大変だったこと

大変だったこととしては

・ 環境2面化では、
工夫した点で挙げた要素の"構造化"的な思考が難しかった。
また他の要素にも通ずる部分があるのですが、
Linuxの環境変数と、yamlの変数が混在していて大変でした。

・ PullRequest周りでは、
Github Actionsを1ユーザとして捉えられていなかったため、
権限やトークンを持たせるイメージがしづらかったです。


・ コンフィグ世代管理では、
pull requestと同様に、Github Actionsをいちユーザとして捉えられていなかったため、
Github ActionsにGitの初期設定をするイメージがしづらく苦労しました。

・ containerlab周りでは、
情報が少なかったため、containerlab実行環境から
Ansibleを使用して、設定変更を行う方法を探すのが大変でした。

・AWSのSecurity Ruleの上限では、
いまだに解決できていない点ではあるんですが、
AWSのSecurity Ruleが1 network interfaceにつき
300程度しか作れない為、3200程あるGithub AcitonsのIPを穴あけするのに
かなり集約することとなりました。


来季の展望
〜〜〜〜〜〜〜〜〜〜〜〜〜
続いて来期の展望としましては、

開発方面では、
・moleculeを入れられないか？
・GithubからGitlabに移行
・SmartCS groupeとの連携
等が出ております。

展開面では。
・APCのサービスやメニューに昇華できないか
・FIGなどのSI案件での活用方法を検討
・ナレッジをまとめて横展開したい

その他
・NetDevopsというbuzz wordに乗っかりたい
・GithubのProjectを使用してタスク管理する

このように様々なアイディアが、メンバーから出ております。
今後も上記のアイディアから発展させていければと考えております。


■所感
最後にまとめとして活動してきた所感について1人ずつ話せればと思います。
まず内田さんお願いします。

～～～
次に北村ですが。
containerlabを触るいいきっかけになりました。
今後もマニュアル作成やplaybookの理解等を深めていきたいです。

次に佐藤さんお願いいたします。

最後に小野さんお願いいたします。



■質疑応答
以上でConfigCICDグループの発表が終わりとなります。
ご清聴いただきありがとうございました。

それでは、質疑応答の時間をとれればと思いますので、
ご質問やご感想等あれば挙手やチャットなどでお願い致します。


改めてご清聴いただきありがとうございました。
続いて川名さんお願いします。