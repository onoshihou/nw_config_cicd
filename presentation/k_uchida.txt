■アジェンダ
それではConfigCICDグループの発表を始めさせていただきます。
アジェンダはこんな感じになってます。



■参加メンバ紹介
まず参加メンバ紹介です。全部で3人います。
最初に小野さんです。
先日の横串Showcaseでも発表されていたNW自動化横串チームのリーダです。

続いて内田です。
元々はNWがメインの業務に6年従事していて、今年の4月にACTに異動した開発1年生です。

最後に北村さんです。
昨年は横串チーム内の人材開発グループのトレーニングを
受けていただいて満を持してご参加くださいました。

各メンバの所属としてMBS、BzD、CWEとiTOC内の3つの部署から
集まっていて横串感の強いグループかなと思っています。



■参加の経緯
続いて参加の経緯です。
まず小野さんは
NW機器のConfig変更をCICDに乗せて行うことで
NWエンジニアにも興味を持ってもらえると思い発案いただきました。
導入までの検証や内部検討についてラクしたいなと思われたそうです。

続いて内田は
この後発表してくださるFIG佐々木大喜さんと、
昨年までSmartCSというコンソールルータを用いた自動化を進めていたのですが、
機能向上が一段落したため別の題材を探したところCICDに興味を持ち参加しました。

最後に北村さんは
リーダの小野さんからの紹介で興味を持っていただき、
人材開発グループの知識から1歩踏み込んだ技術に触れることを目指しご参加いただきました。



■GitHub や GitHub Actionsって？
では本題のGitHub Actionsについて何かを説明しますと
ビルド、テスト、デプロイのパイプラインを自動化できる
継続的インテグレーションと継続的デリバリー (CI/CD) のプラットフォーム
となるのですが正直全然イメージがわきませんよね。。

そもそもGitHubも含めてなじみの無い方に説明させていただきますと、
まずGitHubとは
・プログラムのソースコードを、オンラインで共有・管理するサービス
⇒プログラマだけが使うものと思われがちだが、テキストで書かれた文書管理全般に使える
⇒つまりNWエンジニアも手順書だったり、コンフィグ管理等で使うことができます。
⇒ちなみに"オンライン"というところがセキュリティとして気になる方がいるかもしれませんが、
　その場合は先ほど中山さんの発表で出てきたGitlabを
　オンプレのサーバにinstallして使うということもできます。

そのうえで次にGitHub Actionsとは
・特定の操作をトリガーとして事前定義している処理を自動実行できるツール
・GitHub上でコード管理、概念検証、本番適用を一元的に実施できるため便利なツールとなっています。
・パブリックリポジトリであれば無料で利用可能でき、
　もし試したい場合はクイックスタートという公式サイトがありますので試してみてください。
⇒この後ディレクトリ構成の話が出るのですが、
　特定のディレクトリのファイルにテストコードをコピペしてきて、
　git pushするだけでgithubActionsを試せるのでおすすめです！



■やりたいこと
それでは上記を基に具体的に実施したい内容についてですが、
以下のようなフローやシナリオを考えました。
このようにGitHub関連のツールと
Juniper vLabsというNWのラボ環境がある状態として、
０１．まず最初に上長がメンバに対してコンフィグの作成依頼を行い、
０２．メンバは作成したコンフィグをGitHubにアップロードします。
０３．そうするとGitHub Actions君がディレクトリの状態変化を検知して、
０４．Ansibleを動かすためにコンテナレジストリという保管庫からdockerの実行環境を持ってきます。
０５．そしてGitHub Actions君がJuniper vLabsに対して設定変更を行い、
０６．Juniper vLabsの事後の状態が事前に定義した状態となっていることを確認します。

というのが一連の流れで特に０４の内容がイメージしづらいかと思うのですが、
dockerでansibleの実行環境を用意することで、このフローを実施する度に
必要なアプリケーションをインストールしなければならないといった状況を回避することが出来ます。
⇒ちなみにdockerのイメージを作成する時は川名さんの発表で話のあったansible-builderを利用しました。



■今回のDemoで設定する内容

では０５の部分で具体的にJuniper vLabsの中のどんな構成にどんな設定変更を行うか説明します。
デモとしてお見せしやすいように今回はこのような形の4台でOSPFを構成しています。

左上にあるvMX1から右上にあるvMX2に対して通信を行いたい場合、
通常では直接繋がっているインターフェース0/0/0を通るのですが、
該当インターフェースのメトリック値(コスト)を上昇させることで、
左下のvMX3、右下のvMX4を経由するように設定変更を行いたいと思います。



■ツール実演
それではツールの実演について北村さんお願い致します！



■どのように動作しているか？
北村さんありがとうございました。
それでは具体的にどのように動作しているかですが、

～～～work flow～～～
on～pathsの記載で、project/material配下で変更がかかり、
githubにpushされたときにgithub Actionsが動作することを定義しています。

jobs 以降で実際の処理を記載していきます。
ansible 実行環境となるdockerイメージを呼び出しコンテナを起動します。

その後のsteps以降で、起動したコンテナ内での動作を記述しています。

check myipではgithub actionsに振られているipを確認しています。
ここで確認したipはjuniper vlabsで穴あけする必要があります。

checkout codeでは、apc-nw-auto-cft/auto_check_config_projectリポジトリ内の
githubのリポジトリからgithub actionsで呼び出した実行環境にcloneするために記載しています。

connectivity_checkではcheck myipでipを手動で入力する時間を稼ぐために
有志がgithub marketplaceに公開しているactionを使って
特定のコマンドを5秒間隔で最大5回繰り返すような処理を記述しています。

config changeでは実際に経路変更やconfigの妥当性を判断するplaybookを動作させる記述をしています。


～～～ play book　～～～


---bypass/expect.yaml---

ここでは、各機器の事前、事後で確認するコマンドを記載しています。
elementは後程、xml形式で取得されたshowコマンドの出力結果を確認したい箇所だけ、
見れるように成型するために出力するために使います。
(詳細はinspect/main.ymlで)
before,afterでは事前事後で予想される状態を記述している。

---inspect/main.yml----
Debug show command
取得するコマンドをターミナルに出力させてるための記述です。

Get show
実際にinventoryで定義している各機器にloopを使って、上述のshowコマンドを投入、xml形式で取得します。

Parse xml
xml形式で取得したshowコマンドの結果の中から、
xpathでexpect.yml内で定義したelementの箇所だけ出力できるよう成型する

Debug parsed xml
上記で取得したコマンド結果の表示、expectにexpect.yamlで記載した想定の値、actualに実際の結果を出力している。

Assert
expectとactualの値が一致した際に、それ以降の処理へ進む。事後のassertで、投入したconfigの妥当性の確認をしています。

---commit/tasks/main.yml---

Debug config
bypass/config内の各機器に設定変更をかけたいconfigを出力させています。
(取得はcommit_and_inspect.yml内のfind files)

Commit config
実際に経路変更をかけるためにmetricを上昇させるコマンドをVMX1,2に投入します。

あとは、上記の流れを再度繰り返し、値が変更後の物になっているか確認しています。

---commit_and_inspect.yml---
Include_vars operation
localhost内にあるmaterial配下のoperation.yamlを変数として定義しています。

Include_vars expect
localhost内にあるmaterial配下のexpect.yamlをexpectという変数で定義している。


Import inspect
inspect_before_or_afterに事前の結果を見るようbeforeを代入
inspect_show_target_hostsにexceptに記述のある機器名を代入
inventoryにinspect_show_target_hostsに代入されている機器名がある場合にrole/inspect/main.ymlの実行します。

Find files
bypass/config/VMX1,2内の各機器に経路変更をかけるconfig内容の取得します。

Import commit
commit_config_pathに上述のfilespathを代入
commit_config_target_hostsに変更対象の機器名を代入
inventoryにcommit_config_target_hostsに代入されている機器名がある場合にrole/commit/main.ymlの実行をします。

Import inspect
上述の変更後の結果を見る為inspect_before_or_afterにafter代入



■[タイトル未定]
実際にツールを作成してみての雑多なメモですが、
・各ツールについて無料枠を利用しているため、
　他の方が使いたい場合も気軽に試すことが出来るようになっています。

・工夫したところとしてlintというコードチェックのツールを用いて
　コードの可読性向上に努めました。  
⇒その中で先ほど説明した「on」の記述について
  ブール値としてみなされlintに怒られたのは意外な発見でした。  

・GitHub Actionsの実行ごとにIPアドレスの穴開けが発生して面倒  
⇒制約としてJuniper vLabsについて最大/29の範囲までしか一度に穴開けできず、
　GitHub Actionsが利用するグローバルIPが3000セグメント程度存在ので、
　全てを穴開けするのは現実的ではないと考えていました。
  ⇒北村さんがデモでお見せしてくださったように
  　GitHubActionsで利用されるグローバルIPが確定してからJuniper vLabsの穴開けが必要になっています。
  　穴開けがあまりに面倒なので今後はVyOSやCMLへの移行について検討したいなと考えています。
  ⇒ちなみに穴開けについて当初は待ち時間をsleepモジュールで決め打ちしていたのですが、
  　有志の方が公開しているリトライactionを用いることでテクニカルにすることができた。   



■下期の展望
続いて下期の展望ですが「検証環境」と「本番環境」の2面化の対応を行おうと考えています。
具体的にですが先ほどまでの検証環境への設定変更に続き、
０７．実行結果が想定通りであったらPullRequestという承認依頼を自動的に発行し、
０８．上長が結果についてOK/NGの判断を行い、
０９．判定OKであれば検証ブランチから本番ブランチへのマージを行い
１０．検証環境で行ったのと同様にGitHub Actionsがディレクトリの変化を検知
１１．コンテナ保管庫からの実行環境の取得
１２．本番環境への設定変更の実施
１３．変更した結果のチェックまでを実施したく考えています。



■所感
最後にまとめとして活動してきた所感について1人ずつ話せればと思います。
まず小野さんお願いします。
～～～
次に内田ですが
北村さんが素晴らしい所感を述べてくれるので脱線すると
～～～
最後に北村さんお願いします。
～～～



■質疑応答
以上でConfigCICDグループの発表が終わりとなります。
ご清聴いただきありがとうございました。

質疑応答の時間をとれればと思いますので、
挙手やチャットなどでお願い致します。

改めてご清聴いただきありがとうございました。
続いて佐々木大喜さんお願いします。
